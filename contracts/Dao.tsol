pragma ever-solidity >= 0.61.2;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "./errors/DaoErrors.tsol";


contract Dao {
    uint256 static _nonce;
    uint32 public _numOfProposals;
    uint32 public _numOfTasks;
    uint64 public _memberUID;
    uint128 public _numOfComments;
    uint256 _managerPublicKey;

    mapping(address => bool) memberExists;

    event MemberAdded(address member);
    event TaskCreated(address owner,uint32 TaskId);
    event TaskClaimed(address member,uint32 TaskId);
    event TaskSubmitted(address member,uint32 TaskId);
    event TaskReviewStarted(uint32 TaskId);
    event TaskCompleted(address member,uint32 TaskId);
    event TaskCancelled(uint32 TaskId);
    event ProposalCreated(address owner,uint32 ProposalId);
    event MemberVoted(address member,uint32 ProposalId);
    event VoteFinalized(uint32 ProposalID);
    event CommentPosted(uint32 TaskId,address member, uint128 CommentId);

    struct Member {
        uint64 uid;
        string name;
        uint128 points;
        uint128 earned;
        uint128 assigned;
        uint32 acceptedTasks;
        uint32 accumulatedVotes;
        uint32[] appliedTasks;
        uint32[] createdTasks;
        uint32[] createdProposals; 
    }

    mapping(address => Member) members;
    mapping(address => mapping(uint32 => bool)) isTaskClaimed;

    enum VoteStatus {
        NotAvailable,
        InProgress,
        Passed,
        Failed
    }

    struct Vote {
        uint32 startTime;
        uint32 endTime;
        uint32 yes;
        uint32 no;
        uint32 abstain;
        VoteStatus status;
    }

    enum AssigneeStatus {
        Claimed,
        Submitted,
        Cancelled,
        NotAssigned
    }

    struct TaskAssignee {
        AssigneeStatus status;
        string submission;
    }

    mapping(address => mapping( uint32 => TaskAssignee)) assigneeToTask;

    enum TaskStatus {
        InProgress,
        UnderReview,
        Accepted,
        Rejected
    }

    struct Comment {
        uint32 postTime;
        address commenter;
        string comment;
    }

    mapping(uint128 => Comment) comments;

    struct Task {
        uint32 startTime;
        uint32 endTime;
        uint32 points;
        uint128 bounty;
        address owner;
        address[] assignees;
        address winner;
        uint128[] comments;
        string title;
        string description;
        TaskStatus status;
    }

    mapping(uint32 => Task) tasks;

    struct Proposal {
        address creator;
        uint32 createdTime;
        string title;
        string description;
    }

    mapping(uint32 => Proposal) proposals;
    mapping(uint32 => Vote) votes;
    mapping(address => mapping(uint32 => bool)) memberVote;

    constructor(
        uint256 managerPublicKey,
        address sendRemainingGasTo
    ) public {
        tvm.accept();
        tvm.rawReserve(1 ever, 0);
        _managerPublicKey = managerPublicKey;
        sendRemainingGasTo.transfer({ value: 0, flag: 128, bounce: false });
    }

    function joinDao(string name) external {
        require(memberExists[msg.sender] == false, DaoErrors.member_already_exists);
        tvm.rawReserve(1 ever, 0);

        _memberUID++;
        memberExists[msg.sender] = true;
        members[msg.sender].uid = _memberUID;
        members[msg.sender].name = name;
        msg.sender.transfer({value: 0, flag: 128, bounce: false});
        emit MemberAdded(msg.sender);
    }

    function isMember(address person) external view returns (bool exists) {
        return memberExists[person];
    }

    function createTask(string title, string description,uint32 duration,uint32 points,uint128 bounty) external {
        if (memberExists[msg.sender] == false || bounty > 1 ever + msg.value) {
            msg.sender.transfer({ value: 0, flag: 128, bounce: false });
        }
        tvm.rawReserve(1 ever, 0);
        
        _numOfTasks++;
        tasks[_numOfTasks].startTime = now;
        tasks[_numOfTasks].endTime = now + duration;
        tasks[_numOfTasks].title = title;
        tasks[_numOfTasks].description = description;
        tasks[_numOfTasks].owner = msg.sender;
        tasks[_numOfTasks].points = points;
        tasks[_numOfTasks].bounty = bounty;
        tasks[_numOfTasks].status = TaskStatus.InProgress;

        members[msg.sender].assigned += bounty;
        members[msg.sender].createdTasks.push(_numOfTasks);

        emit TaskCreated(msg.sender,_numOfTasks);
    }

    function claimTask(uint32 taskID) external {
        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);
        require(isTaskClaimed[msg.sender][taskID] == false,DaoErrors.task_already_claimed_by_member);
        // add rawreserve. Pay it back later
        //tvm.accept();

        Task temp = tasks[taskID];
        require(now >= temp.startTime && now < temp.endTime,DaoErrors.task_expired);
        require(temp.status == TaskStatus.InProgress,DaoErrors.task_not_in_progress);

        tasks[taskID].assignees.push(msg.sender);
        assigneeToTask[msg.sender][taskID].status = AssigneeStatus.Claimed;
        members[msg.sender].appliedTasks.push(taskID);
        isTaskClaimed[msg.sender][taskID] = true;

        emit TaskClaimed(msg.sender,taskID);
    }

    function submitTask(uint32 taskID,string submission) external {

        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);
        tvm.accept();

        Task temp = tasks[taskID];
        require(now >= temp.startTime && now < temp.endTime,DaoErrors.task_expired);
        require(temp.status == TaskStatus.InProgress,DaoErrors.task_not_in_progress);
        require(assigneeToTask[msg.sender][taskID].status == AssigneeStatus.Claimed,DaoErrors.task_not_claimed);

        assigneeToTask[msg.sender][taskID].submission = submission;
        assigneeToTask[msg.sender][taskID].status = AssigneeStatus.Submitted;

        emit TaskSubmitted(msg.sender,taskID);
    }

    function createProposal(string title, string description, uint32 duration) external {
        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);

        _numOfProposals++;
        proposals[_numOfProposals].title = title;
        proposals[_numOfProposals].description = description;
        proposals[_numOfProposals].creator = msg.sender;
        proposals[_numOfProposals].createdTime = now;

        votes[_numOfProposals].startTime = now;
        votes[_numOfProposals].endTime = now + duration;
        votes[_numOfProposals].status = VoteStatus.InProgress;

        members[msg.sender].createdProposals.push(_numOfProposals);

        emit ProposalCreated(msg.sender,_numOfProposals);
    }

    function castVote(uint32 proposalID,uint8 val) external {
        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);
        require(memberVote[msg.sender][proposalID] == false, DaoErrors.member_has_already_voted);
        require(val <= 2,DaoErrors.only_three_choices_allowed);
        require(votes[proposalID].endTime >= now && votes[proposalID].status == VoteStatus.InProgress, DaoErrors.proposal_not_active);

        if (val == 0) {
            votes[proposalID].yes +=1;
        } else if (val == 1) {
            votes[proposalID].no +=1;
        } else {
            votes[proposalID].abstain +=1;
        }

        memberVote[msg.sender][proposalID] = true;

        members[msg.sender].accumulatedVotes += 1;

        emit MemberVoted(msg.sender,proposalID);
    }

    function finalizeVote(uint32 proposalID) external {
        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);
        require(votes[proposalID].endTime < now && votes[proposalID].status == VoteStatus.InProgress, DaoErrors.proposal_still_active);

        tvm.accept();

        if (votes[proposalID].yes > votes[proposalID].no + votes[proposalID].abstain) {
            votes[proposalID].status = VoteStatus.Passed;
        } else {
            votes[proposalID].status = VoteStatus.Failed;
        }

        emit VoteFinalized(proposalID);
    }

    function startReview(uint32 taskID) external {
        Task temp = tasks[taskID];
        require(temp.owner == msg.sender,DaoErrors.not_the_owner);
        require(now > temp.endTime,DaoErrors.time_not_expired);
        require(temp.status == TaskStatus.InProgress,DaoErrors.task_not_in_progress);

        tasks[taskID].status = TaskStatus.UnderReview;

        emit TaskReviewStarted(taskID);
    }

    function finishReview(uint32 taskID,address winner) external {
        Task temp = tasks[taskID];
        require(temp.owner == msg.sender,DaoErrors.not_the_owner);
        require(temp.status == TaskStatus.UnderReview,DaoErrors.task_not_in_progress);

        tasks[taskID].status = TaskStatus.Accepted;

        uint128 bounty = temp.bounty;
        winner.transfer({ value: bounty, flag: 128, bounce: false});

        members[msg.sender].assigned -= bounty;
        members[winner].earned += bounty;
        members[winner].points += temp.points;
        tasks[taskID].winner = winner;
        members[winner].acceptedTasks += 1;

        emit TaskCompleted(winner,taskID);
    }

    function addComment(uint32 taskID, string message) external {
        require(memberExists[msg.sender] == true,DaoErrors.member_does_not_exist);
        tvm.accept();

        Task temp = tasks[taskID];
        require(now >= temp.startTime && now < temp.endTime,DaoErrors.task_expired);
        require(temp.status == TaskStatus.InProgress,DaoErrors.task_not_in_progress);

        _numOfComments++;
        comments[_numOfComments].postTime = now;
        comments[_numOfComments].commenter = msg.sender;
        comments[_numOfComments].comment = message;

        tasks[taskID].comments.push(_numOfComments);

        emit CommentPosted(taskID,msg.sender,_numOfComments);
    }

    function cancelTask(uint32 taskID) external {
        Task temp = tasks[taskID];
        require(temp.owner == msg.sender,DaoErrors.not_the_owner);
        require(temp.status == TaskStatus.InProgress || temp.status == TaskStatus.UnderReview,DaoErrors.task_not_active);

        tasks[taskID].status = TaskStatus.Rejected;

        uint128 bounty = temp.bounty;

        msg.sender.transfer({ value: bounty, flag: 128, bounce: false});
        members[msg.sender].assigned -= bounty;

        emit TaskCancelled(taskID);
    }

    function getMember(address member) external view returns (Member) {

        return members[member];
    }

    function getTask(uint32 taskID) external view returns (Task) {
        return tasks[taskID];
    }

    function getAssigneeToTask(address assignee, uint32 taskID) external view returns (TaskAssignee) {
        return assigneeToTask[assignee][taskID];
    }

    function getProposal(uint32 proposalID) external view returns (Proposal) {
        return proposals[proposalID];
    }

    function getVote(uint32 proposalID) external view returns (Vote) {
        return votes[proposalID];
    }

    function getComment(uint128 commentID) external view returns (Comment) {
        return comments[commentID];
    }

}